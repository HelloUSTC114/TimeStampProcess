# This makefile aims at procesing all file
# First, TestDict is dictionary that should be generated by root cling.
# Then, all .o file must be generated in order to reduce compile time
# .so library is final aim if no specific excutable file is needed.

# SOURCE = BoardBuffer.cpp BoardsManager.cpp CombineData.cpp Configure.cpp OneGroup.cpp Loop.cpp TPrimaryData.cpp TCombinedData.cpp FileManager.cpp TDetectorInfo.cpp mppc.cpp

PWD = `pwd`

DIR_INC = ./include
DIR_SRC = ./src
DIR_OBJ = ./obj
DIR_BIN = ./bin
DIR_LIB = ./lib

# Search all .cpp files in this directory(main.cpp) and src directory
SRC = $(wildcard ${DIR_SRC}/*.cpp)
# Search all .h files in include directroy
HEADERPRE = $(wildcard ${DIR_INC}/*.h)
HEADER = ${subst ${DIR_INC}/LinkDef.h, ,$(HEADERPRE)}
# substitute all .cpp in $(SRC) with .o, and add related directory path
OBJ = $(patsubst %.cpp,${DIR_OBJ}/%.o,$(notdir ${SRC}) )


# OBJ = BoardBuffer.o BoardsManager.o CombineData.o Configure.o OneGroup.o Loop.o TPrimaryData.o TCombinedData.o FileManager.o TDetectorInfo.o mppc.o GetPosition.o
# HEADER = BoardBuffer.h BoardsManager.h CombineData.h Configure.h OneGroup.h Loop.h TPrimaryData.h TCombinedData.h FileManager.h TDetectorInfo.h mppc.h GetPosition.h



CXXFLAGS = -g -Wall -I${DIR_INC} -I. `root-config --cflags`


LIB = ReadFile
LIBFULL = $(patsubst %,${DIR_LIB}/lib%.so,$(LIB))

DIR_LINK = ./lkdef
LINKDEF = ${DIR_INC}/LinkDef.h
DICTCXX = ${DIR_LINK}/$(LIB)Dict.cxx


# Define uninstall path
UNINSTALLHEADER = $(patsubst %.h,${HOME}/include/%.h,$(notdir ${HEADER}))
UNINSTALLLIB = $(patsubst %.so,${HOME}/lib/%.so,$(notdir ${LIBFULL}))



Excutable = test read treetest treeread ProcessOrigin ReadData DrawSignal GetResult ReadOrigin TestThreshold


$(LIBFULL): $(OBJ) $(DICTCXX)
	@echo Generating lib: $@
	@`root-config --cxx`	-fPIC	-shared	-o	$@	$(OBJ)	$(DICTCXX)	`root-config --libs`  $(CXXFLAGS) -lSpectrum

${DIR_OBJ}/%.o: ${DIR_SRC}/%.cpp ${DIR_INC}/%.h
	@echo Generating: $@
	@`root-config --cxx `	-o	$@	-c	$<	-fPIC $(CXXFLAGS)

$(DICTCXX): $(HEADER)   $(LINKDEF)
	@echo rootcling generating $@
	-@mkdir $(DIR_LINK)
	@rootcling	-f	$@	-c	$(HEADER)
	@cp $(DIR_LINK)/*pcm $(PWD)



clean:
	-rm obj/*.o lib/*.so lkdef/* bin/*
distclean:
	-rm obj/*.o lib/*.so lkdef/* bin/*
	-rm *.root *.pdf $(Excutable) *Dict* filelist


test:  test.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
read:	read.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
treetest:	treetest.cpp $(LIBFULL)	
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

# Fill all combined data in "Detector.root" into a TH2D histogram to get a position distribution.
treeread:	treeread.cpp $(LIBFULL)	
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

# Arrange and align all original data, and save them all to a root file, root file name is "Detector.root" as default.
ProcessOrigin:	ProcessOrigin.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

# Read just one data from Detector.root, pass number to the program, the program will show the data required.
ReadData:	ReadData.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

# Draw signal spectrum for all channels
DrawSignal:	DrawSignal.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
# Process origin and read tree
GetResult: GetResult.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

ReadOrigin: ReadOrigin.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

TestThreshold: TestThreshold.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

CheckData:	CheckData.cpp	$(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

CheckLogic:	CheckLogic.cpp 	$(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

CaliOneDetector:	CaliOneDetector.cpp 	$(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

ProcessCali:	ProcessCali.cpp 	$(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
Cali3Detectors: Cali3Detectors.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
Cali3Detectors2: Cali3Detectors2.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
CaliTest: CaliTest.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)




GetPositionResolution:	GetPositionResolution.cpp 	$(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

GetPositionResolution2:	GetPositionResolution2.cpp 	$(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

GetPositionSimplest: GetPositionSimplest.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
GetPositionSquare: GetPositionSquare.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
ProcessPosition: ProcessPosition.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
TryCaliTri: TryCaliTri.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
TestGetPosition: TestGetPosition.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
ProcessTriangle: ProcessTriangle.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
CaliTriangleDetector: CaliTriangleDetector.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
ProcessTriangleCalibration: ProcessTriangleCalibration.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
ProcessRS: ProcessRS.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
PlateSpectrum: PlateSpectrum.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
ProcessPlateCalibration: ProcessPlateCalibration.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
CaliPlateDetector: CaliPlateDetector.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)

# Check whether Data is valid or not
RepairData: RepairData.cpp $(LIBFULL)
	@echo Generating $@
	@`root-config --cxx `	-o	$@	$<	-Llib	-l$(LIB)	`root-config --libs` $(CXXFLAGS)
	




all: $(Excutable)

install: $(LIBFULL)
	@echo Copying lib and headers to user directory
	-@cp $(LIBFULL) ~/lib
	-@cp $(HEADER) ~/include

uninstall:
	@echo Uninstalling from ${HOME}/lib and ${HOME}/include
	-@rm ${UNINSTALLHEADER}
	-@rm ${UNINSTALLLIB}